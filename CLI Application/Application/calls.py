import time
from branch_and_bound import *
from heuristics import *
from local_search import *
from utils import *

def initialization(data):
    print('Choose the intialization option.')
    print('1- Random initial solution.')
    print('2- Initial solution generated by a heuristic.')
    choice = int(input("Enter the number of the chosen initialization: "))
    sequence = []
    cmax = 0
    while True:
        if choice == 1:
            sequence = generate_seq(data.shape[0])
            cmax = evaluate_sequence(sequence, data)
            break
        elif choice == 2:
            sequence, cmax, _= heuristics(data)
            break
        else:
            print("Invalid choice, please enter a valid choice.")
            choice = int(input("Enter the number of the chosen initialization: "))
    print(f'Generated initial solution is {sequence} with a makespan of {cmax}.')
    return sequence, cmax

def heuristics(data):
    print('\nAvailable heuristics.')
    print('1- NEH heuristic')
    print('2- With Ham heuristic')
    print('3- With Palmer heuristic')
    print('4- With CDS heuristic')
    print('5- With Gupta heuristic')
    print('6- With PRSKE heuristic')
    print('7- With Artificial heuristic') 
    choice = int(input("Enter the number of the heuristic: "))
    while True:
        if choice == 1:
            start_time = time.time()
            sequence, cmax = neh_algorithm(data)
            elapsed_time = time.time() - start_time
            break
        elif choice == 2:
            start_time = time.time()
            sequence, cmax = ham_heuristic(data)
            elapsed_time = time.time() - start_time
            break
        elif choice == 3:
            start_time = time.time()
            sequence = palmer_heuristic(data)
            elapsed_time = time.time() - start_time
            cmax = evaluate_sequence(sequence, data)
            break
        elif choice == 4:
            start_time = time.time()
            sequence, cmax = CDS_heuristic(data)
            elapsed_time = time.time() - start_time
            break
        elif choice == 5:
            start_time = time.time()
            sequence = gupta_heuristic(data)
            elapsed_time = time.time() - start_time
            cmax = evaluate_sequence(sequence, data)
            break
        elif choice == 6:
            start_time = time.time()
            sequence, cmax = PRSKE_heuristic(data)
            elapsed_time = time.time() - start_time
            break
        elif choice == 7:
            start_time = time.time()
            sequence, cmax = artificial_heuristic(data)
            elapsed_time = time.time() - start_time
        else:
            print("Invalid choice, please enter a valid choice.")
            choice = int(input("Enter the number of the heuristic: "))
    return sequence, cmax, elapsed_time

def localsearch(data):
    print('\Available local search metaheuristics.')
    print("1- Random Walk")
    print("2- Simple Hill Climbing")
    print("3- Steepest Ascent Hill Climbing")
    print("4- Stochastic Hill Climbing")
    print("5- Simulated Annealing")
    print("6- Tabu Search")
    print("7- Variable Neighborhood Search")
    choice = int(input("Enter the number of the chosen metaheuristic: "))
    while True: 
        if choice == 1:
            sequence, cmax = initialization(data)
            nb_iter = int(input("Enter number of maximum iterations: "))
            start_time = time.time()
            sequence, cmax, _ = random_walk(sequence, data, nb_iter=nb_iter)
            elapsed_time = time.time() - start_time
            break
        elif choice == 2:
            sequence, cmax = initialization(data)
            nb_iter = int(input("Enter number of maximum iterations: "))
            start_time = time.time()
            sequence, cmax, _ = simple_hill_climbing(sequence, data, nb_iter=nb_iter)
            elapsed_time = time.time() - start_time
            break
        elif choice == 3:
            sequence, cmax = initialization(data)
            nb_iter = int(input("Enter number of maximum iterations: "))
            start_time = time.time()
            sequence, cmax, _ = steepest_ascent_hill_climbing(sequence, data, nb_iter=nb_iter)
            elapsed_time = time.time() - start_time
            break
        elif choice == 4:
            sequence, cmax = initialization(data)
            nb_iter = int(input("Enter number of maximum iterations: "))
            start_time = time.time()
            sequence, cmax, _ = stochastic_hill_climbing(sequence, data, nb_iter=nb_iter)
            elapsed_time = time.time() - start_time
            break
        elif choice == 5:
            sequence, cmax = initialization(data)
            initial_temp = int(input("Enter value of initial temperature: "))
            final_temp = int(input("Enter value of final temperature: "))
            alpha = int(input("Enter value of the parameter alpha: "))
            start_time = time.time()
            sequence, cmax = simulated_annealing(sequence, data, initial_temp=initial_temp, final_temp=final_temp, alpha=alpha)
            elapsed_time = time.time() - start_time
            break
        elif choice == 6:
            sequence, cmax = initialization(data)
            nb_iter = int(input("Enter number of maximum iterations: "))
            start_time = time.time()
            sequence, cmax, _ = tabu_search(sequence, data, nb_iter=nb_iter)
            elapsed_time = time.time() - start_time
            break
        elif choice == 7:
            sequence, cmax = initialization(data)
            nb_iter = int(input("Enter number of maximum iterations: "))
            k_max = int(input("Enter value of the parameter k_max: "))
            start_time = time.time()
            sequence, cmax = vns(sequence, data, nb_iter, k_max)
            elapsed_time = time.time() - start_time
            break
        else:
            print("Invalid choice, please enter a valid choice.")
            choice = int(input("Enter the number of the chosen metaheuristic: "))
    return sequence, cmax, elapsed_time